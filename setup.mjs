import * as readline from 'node:readline/promises';
import {stdin as input, stdout as output} from 'node:process';
import chalk from "chalk";
import * as fs from "node:fs/promises";


const setup = [
    {
        question: 'Enter your MySQL Host: ',
        key: 'DB_HOST',
        default: 'localhost',
        value: ''
    },
    {
        question: 'Enter your MySQL Port: ',
        key: 'DB_PORT',
        default: '3306',
        value: ''
    },
    {
        question: 'Enter your MySQL User: ',
        key: 'DB_USER',
        default: 'root',
        value: ''
    },
    {
        question: 'Enter your MySQL Password: ',
        key: 'DB_PASS',
        default: 'root',
        value: ''
    },
    {
        question: 'Enter your MySQL Database name: ',
        key: 'DB_DATABASE',
        default: 'pathfinder',
        value: ''
    },
    {
        question: 'Enter your Database table name for meteodata: ',
        key: 'DB_METEOTABLENAME',
        default: 'meteo',
        value: ''
    },
    {
        question: 'Enter your Database table name for sensors: ',
        key: 'DB_SENSORSTABLENAME',
        default: 'sensors',
        value: ''
    },
    {
        question: 'Enter your MQTT Broker Host: ',
        key: 'MQTT_HOST',
        default: 'localhost',
        value: ''
    },
    {
        question: 'Enter your MQTT Broker Port: ',
        key: 'MQTT_PORT',
        default: '1883',
        value: ''
    },
    {
        question: 'Enter your SRF Meteo Consumer Key: ',
        key: 'METEO_CONSUMER_KEY',
        default: '',
        value: ''
    },
    {
        question: 'Enter your SRF Meteo Consumer Secret: ',
        key: 'METEO_CONSUMER_SECRET',
        default: '',
        value: ''

    },
    {
        question: 'Enter SRF Meteo API Host: ',
        key: 'METEO_HOST',
        default: 'api.srgssr.ch',
        value: ''
    },{
        question: 'Enter SRF Meteo OAUTH path: ',
        key: 'METEO_OAUTH_PATH',
        default: '/oauth/v1/accesstoken?grant_type=client_credentials',
        value: ''
    },{
        question: 'Enter SRF Meteo Forecast path: ',
        key: 'METEO_PATH',
        default: '/srf-meteo/forecast',
        value: ''
    },
    {
        question: 'Enter your SRF Meteo Location Zip: ',
        key: 'METEO_LOCATION_ZIP',
        default:'8887',
        value: ''
    },
    {
        question: 'Enter your SRF Meteo Location ID: ',
        key: 'METEO_LOCATION_ID',
        default: '47.0459,9.4215',
        value: ''
    },
    {
        question: 'Enter the desired update Interval to fetch new data from Meteo API: ',
        key: 'DB_UPDATEINTERVALMS',
        default: '21600000',
        value: ''
    }
];

const rl = readline.createInterface({input, output});

console.log('Welcome to the Pathfinder Setup');
console.log('Please enter your settings for the Pathfinder Server');
console.log('If you leave a field empty, the default value will be used');

for (const setupElement of setup) {
    const note = setupElement.default ? chalk.grey.italic(` (default: ${setupElement.default})`) : '';
    setupElement.value = await rl.question(setupElement.question + note);
    if (setupElement.value === '') {
        setupElement.value = setupElement.default;
    }
    console.log(setupElement.key + ' = ' + setupElement.value);
}

// Path: .env
// This file is generated by the setup script
const configString = setup.map(({key, value}) => `${key}=${value}`).join('\n');
try{
    await fs.writeFile('.env', configString, {encoding: 'utf8'});
}catch(e){console.log(e)}


console.log(chalk.bold.green('------------------------------------------------------------------'));
console.log(chalk.green.bold('Setup Complete!'));
console.log(chalk.green('Thank you for using PathFinder Setup'));
console.log(chalk.bold.green('------------------------------------------------------------------'));


rl.close();